 E aÃ­! ðŸ‘‹ Sou o Orbi, seu assistente virtual. Preparado para criar essa pÃ¡gina de login com HTML, CSS, JavaScript e PHP seguindo a estrutura MVC e com seguranÃ§a? ðŸš€

**Estrutura MVC:**

*   **Model:** Lida com a lÃ³gica de dados e acesso ao banco de dados (ex: `models/UsuarioModel.php`).
*   **View:** ResponsÃ¡vel pela apresentaÃ§Ã£o visual (ex: `views/login.php`).
*   **Controller:** IntermediÃ¡rio entre o Model e a View, processa as requisiÃ§Ãµes do usuÃ¡rio (ex: `controllers/LoginController.php`).

**1. HTML (login.php - View):**

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <div class="container">
        <h1>Login</h1>
        <form id="loginForm" action="index.php?controller=Login&action=processarLogin" method="post">
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="senha">Senha:</label>
                <input type="password" id="senha" name="senha" required>
            </div>
            <button type="submit">Entrar</button>
            <div id="mensagemErro" class="error-message"></div>
        </form>
    </div>
    <script src="js/script.js"></script>
</body>
</html>
```

**2. CSS (style.css):**

```css
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 300px;
    text-align: center;
}

.form-group {
    margin-bottom: 15px;
}

label {
    display: block;
    text-align: left;
    margin-bottom: 5px;
}

input[type="email"],
input[type="password"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

button {
    background-color: #5cb85c;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #4cae4c;
}

.error-message {
    color: red;
    margin-top: 10px;
}
```

**3. JavaScript (script.js):**

```javascript
document.getElementById('loginForm').addEventListener('submit', function(event) {
    var email = document.getElementById('email').value;
    var senha = document.getElementById('senha').value;
    var mensagemErro = document.getElementById('mensagemErro');

    if (!email || !senha) {
        mensagemErro.textContent = 'Por favor, preencha todos os campos.';
        event.preventDefault(); // Impede o envio do formulÃ¡rio
    } else {
        mensagemErro.textContent = ''; // Limpa a mensagem de erro
    }
});
```

**4. PHP (Model - UsuarioModel.php):**

```php
<?php
class UsuarioModel {
    private $conexao;

    public function __construct($conexao) {
        $this->conexao = $conexao;
    }

    public function buscarUsuarioPorEmail($email) {
        $email = $this->conexao->real_escape_string($email);
        $query = "SELECT id, senha FROM usuarios WHERE email = '$email'";
        $resultado = $this->conexao->query($query);

        if ($resultado && $resultado->num_rows > 0) {
            return $resultado->fetch_assoc();
        } else {
            return null;
        }
    }
}
?>
```

**5. PHP (Controller - LoginController.php):**

```php
<?php
require_once 'models/UsuarioModel.php';

class LoginController {
    private $usuarioModel;

    public function __construct($conexao) {
        $this->usuarioModel = new UsuarioModel($conexao);
    }

    public function processarLogin() {
        $email = $_POST['email'] ?? '';
        $senha = $_POST['senha'] ?? '';

        // Validar os dados (ex: usar filter_var para email)

        $usuario = $this->usuarioModel->buscarUsuarioPorEmail($email);

        if ($usuario && password_verify($senha, $usuario['senha'])) {
            // Iniciar a sessÃ£o
            session_start();
            $_SESSION['usuario_id'] = $usuario['id'];
            // Redirecionar para a pÃ¡gina principal
            header('Location: index.php?controller=Home&action=index');
            exit;
        } else {
            // Exibir mensagem de erro
            $erro = "Email ou senha incorretos.";
            include 'views/login.php'; // Recarrega a pÃ¡gina de login com o erro
        }
    }
}
?>
```

**6. PHP (index.php - Roteamento e ConexÃ£o):**

```php
<?php
session_start(); // Inicia a sessÃ£o no inÃ­cio

// ConfiguraÃ§Ãµes do banco de dados
$host = 'localhost';
$usuario = 'seu_usuario';
$senha = 'sua_senha';
$banco = 'seu_banco';

// ConexÃ£o com o banco de dados
$conexao = new mysqli($host, $usuario, $senha, $banco);

if ($conexao->connect_error) {
    die("Erro na conexÃ£o com o banco de dados: " . $conexao->connect_error);
}

// Roteamento
$controller = $_GET['controller'] ?? 'Login';
$action = $_GET['action'] ?? 'index';

// Incluir o controller
$controllerNome = ucfirst($controller) . 'Controller';
$controllerArquivo = 'controllers/' . $controllerNome . '.php';

if (file_exists($controllerArquivo)) {
    require_once $controllerArquivo;
    $controllerInstancia = new $controllerNome($conexao);

    if (method_exists($controllerInstancia, $action)) {
        $controllerInstancia->$action();
    } else {
        echo "AÃ§Ã£o nÃ£o encontrada.";
    }
} else {
    echo "Controller nÃ£o encontrado.";
}

$conexao->close();
?>
```

**SeguranÃ§a:**

*   **`password_hash()` e `password_verify()`:**  Use `password_hash()` para salvar as senhas no banco de dados de forma segura e `password_verify()` para verificar a senha durante o login.  **NUNCA** armazene senhas em texto puro!
*   **`mysqli_real_escape_string()`:**  Use para evitar SQL Injection.
*   **ValidaÃ§Ã£o:** Valide os dados do formulÃ¡rio no lado do servidor (PHP) para evitar ataques.
*   **SessÃµes:** Use sessÃµes para manter o usuÃ¡rio logado.
*   **HTTPS:** Use HTTPS para criptografar a comunicaÃ§Ã£o entre o cliente e o servidor.

**Estrutura de Pastas:**

```
/
â”œâ”€â”€ index.php
â”œâ”€â”€ css/
â”‚   â””â”€â”€ style.css
â”œâ”€â”€ js/
â”‚   â””â”€â”€ script.js
â”œâ”€â”€ views/
â”‚   â””â”€â”€ login.php
â””â”€â”€ controllers/
â”‚   â””â”€â”€ LoginController.php
â””â”€â”€ models/
    â””â”€â”€ UsuarioModel.php
```

**Banco de Dados:**

Crie uma tabela `usuarios` com as seguintes colunas:

*   `id` (INT, PRIMARY KEY, AUTO_INCREMENT)
*   `email` (VARCHAR(255), UNIQUE)
*   `senha` (VARCHAR(255))

**Importante:**

*   Adapte o cÃ³digo para o seu ambiente (conexÃ£o com o banco de dados, nomes de tabelas, etc.).
*   Implemente a lÃ³gica para criar novos usuÃ¡rios (cadastro).
*   Adicione tratamento de erros e mensagens de feedback para o usuÃ¡rio.
*   Considere usar um framework PHP como Laravel ou Symfony para facilitar o desenvolvimento e aumentar a seguranÃ§a.

Qualquer dÃºvida, sÃ³ chamar! ðŸ˜‰